Description: This template deploys a VPC, EC2 with apache webserver, Application Load Balancer and Target group

# describing parameters
Parameters:
  Environment:
    Description: An environment name that will be prefixed to resource names e.g. uat or prd
    Type: String
    Default: Demo

  VpcCIDR:
    Description: Enter the first two field only of a /16 network for the VPC to be used e.g enter 10.100 for 10.100.0.0/16 CIDR
    Type: String
    Default: 10.0

  SupportEmail:
    Description: Email address of the support team
    Type: String
    Default: abc@xyz.com

  KeyName:
    Description: SSH key name for EC2
    Type: String
    Default: ""

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.micro

  ALBPort:
    Description: Port allowed on ALB
    Type: String
    Default: "80"

  InstancePort:
    Description: Port allowed on EC2
    Type: String
    Default: "80"

  ImageId:
    Description: AMI ID used for EC2
    Type: String
    Default: "ami-0c6120f461d6b39e9"

Resources:
  # creating vpc
  ###################################################################################################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Fn::Sub: "${VpcCIDR}.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-vpc"
        - Key: SupportEmail
          Value: !Ref SupportEmail

  ###################################################################################################
  # creating internet gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-igw"

  ###################################################################################################
  # attaching internet gateway to the vpc
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  ###################################################################################################
  # creating public subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, "Fn::GetAZs": !Ref "AWS::Region"]
      CidrBlock:
        Fn::Sub: "${VpcCIDR}.1.0/24"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-Public-Subnet-A"
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, "Fn::GetAZs": !Ref "AWS::Region"]
      CidrBlock:
        Fn::Sub: "${VpcCIDR}.2.0/24"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-Public-Subnet-B"
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, "Fn::GetAZs": !Ref "AWS::Region"]
      CidrBlock:
        Fn::Sub: "${VpcCIDR}.3.0/24"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-Public-Subnet-C"

  ####################################################################################################

  # creating private subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, "Fn::GetAZs": !Ref "AWS::Region"]

      CidrBlock:
        Fn::Sub: "${VpcCIDR}.4.0/24"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-Private-Subnet-A"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, "Fn::GetAZs": !Ref "AWS::Region"]
      CidrBlock:
        Fn::Sub: "${VpcCIDR}.5.0/24"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-Private-Subnet-B"

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, "Fn::GetAZs": !Ref "AWS::Region"]
      CidrBlock:
        Fn::Sub: "${VpcCIDR}.6.0/24"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-Private-Subnet-C"

  ####################################################################################################

  # creating DB subnets
  DBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, "Fn::GetAZs": !Ref "AWS::Region"]

      CidrBlock:
        Fn::Sub: "${VpcCIDR}.7.0/24"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-DB-Subnet-A"

  DBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, "Fn::GetAZs": !Ref "AWS::Region"]

      CidrBlock:
        Fn::Sub: "${VpcCIDR}.8.0/24"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-DB-Subnet-B"

  DBSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, "Fn::GetAZs": !Ref "AWS::Region"]

      CidrBlock:
        Fn::Sub: "${VpcCIDR}.9.0/24"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-DB-Subnet-C"

  ###################################################################################################

  # creating elastic ip
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  ###################################################################################################

  # creating Nat Gateway
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-NatGW-1"

  ###################################################################################################

  # creating public route table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-Public-Routes"

  ###################################################################################################

  # creating default public route
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  ###################################################################################################

  # associating route table with public subnet 1
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  ###################################################################################################

  # associating route table with public subnet 2
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  ###################################################################################################

  # associating route table with public subnet 3
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  ###################################################################################################

  # creating private routable 1 for private subnet 1
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-Private-Route-Table-A

  ###################################################################################################

  # creating default route inside route table of private subnet 1
  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  #     ###################################################################################################

  # associating route table 1 with private subnet 1
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  ###################################################################################################

  # creating private routable 2 for private subnet 2
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-Private-Route-Table-B"

  ###################################################################################################

  # creating default route inside route table of private subnet 2

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  ###################################################################################################

  # associating route table 2 with private subnet 2
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  ###################################################################################################

  # creating private routable 3 for private subnet 3

  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-Private-Route-Table-C"

  ###################################################################################################

  # creating default route inside route table of private subnet 3

  DefaultPrivateRoute3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  ###################################################################################################

  # associating route table 3 with private subnet 3

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref PrivateSubnet3

  ###################################################################################################

  # creating DB route table 1
  DBRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-DB-Route-Table-A

  ###################################################################################################

  # creating DB route table 2
  DBRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-DB-Route-Table-B

  ###################################################################################################

  # creating DB route table 3
  DBRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-DB-Route-Table-C

  ###################################################################################################

  # associating DB route table 1 with DB subnet 1
  DBSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DBRouteTable1
      SubnetId: !Ref DBSubnet1

  ###################################################################################################

  # associating DB route table 2 with DB subnet 2
  DBSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DBRouteTable2
      SubnetId: !Ref DBSubnet2

  ###################################################################################################

  # associating DB route table 3 with DB subnet 3
  DBSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DBRouteTable3
      SubnetId: !Ref DBSubnet3

  ###################################################################################################
  ###################################################################################################

  # creating ALB security group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: !Sub ${Environment}-ALB-SG
      GroupDescription: !Sub ${Environment}-ALB-SG
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ALB-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ALBPort
          ToPort: !Ref ALBPort
          Description: Allowing HTTP inbound
          CidrIp: "0.0.0.0/0"
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          Description: Allowing ICMP traffic to perform ping test
          CidrIp: "0.0.0.0/0"

  ###################################################################################################

  # creating security group for EC2 instance
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: !Sub ${Environment}-EC2-SG
      GroupDescription: !Sub ${Environment}-EC2-SG
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-EC2-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref InstancePort
          ToPort: !Ref InstancePort
          Description: Allowing HTTP inbound from ALB
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          Description: Allowing ICMP traffic to perform ping test
          CidrIp: "0.0.0.0/0"

  ###################################################################################################

  # creating EC2 instance
  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-EC2
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref PrivateSubnet1
          GroupSet:
            - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd.x86_64
          systemctl start httpd.service
          systemctl enable httpd.service
          echo ?Hello World from $(hostname -f)? > /var/www/html/index.html

  ###################################################################################################

  # creating Application Load balancer to host the above webserver
  ApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Sub ${Environment}-ALB
      Scheme: "internet-facing"
      Type: "application"
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      IpAddressType: "ipv4"
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ALB

  ###################################################################################################

  # creating target group for Application Load balancer
  TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      Port: !Ref InstancePort
      Protocol: "HTTP"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      TargetType: "instance"
      Targets:
        - Id: !Ref Ec2Instance
      Matcher:
        HttpCode: "200"
      HealthyThresholdCount: 5
      VpcId: !Ref VPC
      Name: !Sub ${Environment}-ALB-TG
      HealthCheckEnabled: true

  ###################################################################################################

  # creating listener for Application Load Balancer
  HTTPListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: !Ref InstancePort
      Protocol: "HTTP"
      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref TargetGroup
          Type: "forward"

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${Environment}-vpcid"

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
    Export:
      Name: !Sub "${Environment}-priv-subs"

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${Environment}-pub-sub-1"

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${Environment}-pub-sub-2"
  PublicSubnet3:
    Description: A reference to the public subnet in the 3rd Availability Zone
    Value: !Ref PublicSubnet3
    Export:
      Name: !Sub "${Environment}-pub-sub-3"

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${Environment}-priv-sub-1"

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${Environment}-priv-sub-2"
  PrivateSubnet3:
    Description: A reference to the private subnet in the 3rd Availability Zone
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Sub "${Environment}-priv-sub-3"
